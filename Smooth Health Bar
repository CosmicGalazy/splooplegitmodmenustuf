let smoothHealthBarActive = true;

// Define Smooth Health Bar module
const smoothHealthBarModule = {
    entityID: 0,
    entitys1: [],
    entitys2: [],
    animDates: {
        lastUpdate: Date.now(),
        now: Date.now(),
        delta: 0
    },
    Entity: class {
        // ... (your existing Entity class)

        // Add a function to update entity health
        updateHealth(newHealth) {
            this.oldHealth = this.health;
            this.health = newHealth;
            this.dmgOrHealValue = this.health - this.oldHealth;
        }

        // Add a function to update animated health
        updateAnimHealth(delta) {
            // ... (your existing updateAnimHealth code)
        }
    },
    initSmoothHealthBar: function () {
        const canvasPrototype = CanvasRenderingContext2D.prototype;

        // Proxy for fillRect method
        canvasPrototype.fillRect = new Proxy(canvasPrototype.fillRect, {
            apply(sourceFunction, that, callingArguments) {
                const { fillStyle } = that;
                if (["#a4cc4f", "#cc5151"].includes(fillStyle)) {
                    if (smoothHealthBarModule.animDates.now != Date.now()) {
                        smoothHealthBarModule.animDates.now = Date.now();
                        smoothHealthBarModule.animDates.delta = smoothHealthBarModule.animDates.now - smoothHealthBarModule.animDates.lastUpdate;
                        smoothHealthBarModule.animDates.lastUpdate = smoothHealthBarModule.animDates.now;
                    };

                    const [x, y, width, height] = callingArguments;
                    const health = Math.round((width / 95) * 100);
                    let entity = new smoothHealthBarModule.Entity(x, y, health);

                    if (!smoothHealthBarModule.entitys1[smoothHealthBarModule.entityID]) smoothHealthBarModule.entitys1.push(entity);
                    smoothHealthBarModule.entitys2.push(entity);

                    entity = smoothHealthBarModule.entitys1[smoothHealthBarModule.entityID++];
                    entity.updateHealth(health);
                    entity.updateAnimHealth(smoothHealthBarModule.animDates.delta);

                    const animHealthWidth = (entity.animHealth / 100) * 95;
                    const animBgWidth = (entity.backgroundAnim / 100) * 95;

                    that.fillStyle = "#fff";
                    sourceFunction.apply(that, [x, y, animBgWidth, height]);
                    that.fillStyle = fillStyle;
                    return sourceFunction.apply(that, [x, y, animHealthWidth, height]);
                };
                return sourceFunction.apply(that, callingArguments);
            }
        });

        // Proxy for clearRect method
        canvasPrototype.clearRect = new Proxy(canvasPrototype.clearRect, {
            apply(sourceFunction, that, callingArguments) {
                if (that.canvas.id === "game-canvas") {
                    if (smoothHealthBarModule.entitys1.length !== smoothHealthBarModule.entitys2.length) smoothHealthBarModule.entitys1.length = 0;
                    smoothHealthBarModule.entitys2.length = 0;
                    smoothHealthBarModule.entityID = 0;
                };

                return sourceFunction.apply(that, callingArguments);
            }
        });
    },
    toggleSmoothHealthBar: function () {
        smoothHealthBarActive = !smoothHealthBarActive;

        // Implement your logic to activate/deactivate Smooth Health Bar here
        if (smoothHealthBarActive) {
            // Add any initialization logic when activating Smooth Health Bar
            smoothHealthBarButton.textContent = 'ON';
            this.initSmoothHealthBar();
        } else {
            // Add any cleanup logic when deactivating Smooth Health Bar
            smoothHealthBarButton.textContent = 'OFF';
        }
    },
};

// Add event listener for Smooth Health Bar button
document.getElementById('smooth-health-bar-button').addEventListener('click', function () {
    smoothHealthBarModule.toggleSmoothHealthBar();
});
